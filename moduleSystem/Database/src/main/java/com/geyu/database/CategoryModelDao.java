package com.geyu.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.geyu.database.ben.CategoryModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATEGORY_MODEL".
*/
public class CategoryModelDao extends AbstractDao<CategoryModel, Long> {

    public static final String TABLENAME = "CATEGORY_MODEL";

    /**
     * Properties of entity CategoryModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UniqueName = new Property(1, String.class, "uniqueName", false, "UNIQUE_NAME");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Icon = new Property(3, String.class, "icon", false, "ICON");
        public final static Property Order = new Property(4, int.class, "order", false, "ORDER");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
        public final static Property AccountId = new Property(6, long.class, "accountId", false, "ACCOUNT_ID");
        public final static Property SyncStatus = new Property(7, int.class, "syncStatus", false, "SYNC_STATUS");
    }


    public CategoryModelDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATEGORY_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UNIQUE_NAME\" TEXT," + // 1: uniqueName
                "\"NAME\" TEXT," + // 2: name
                "\"ICON\" TEXT," + // 3: icon
                "\"ORDER\" INTEGER NOT NULL ," + // 4: order
                "\"TYPE\" INTEGER NOT NULL ," + // 5: type
                "\"ACCOUNT_ID\" INTEGER NOT NULL ," + // 6: accountId
                "\"SYNC_STATUS\" INTEGER NOT NULL );"); // 7: syncStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATEGORY_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CategoryModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uniqueName = entity.getUniqueName();
        if (uniqueName != null) {
            stmt.bindString(2, uniqueName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(4, icon);
        }
        stmt.bindLong(5, entity.getOrder());
        stmt.bindLong(6, entity.getType());
        stmt.bindLong(7, entity.getAccountId());
        stmt.bindLong(8, entity.getSyncStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CategoryModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uniqueName = entity.getUniqueName();
        if (uniqueName != null) {
            stmt.bindString(2, uniqueName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(4, icon);
        }
        stmt.bindLong(5, entity.getOrder());
        stmt.bindLong(6, entity.getType());
        stmt.bindLong(7, entity.getAccountId());
        stmt.bindLong(8, entity.getSyncStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CategoryModel readEntity(Cursor cursor, int offset) {
        CategoryModel entity = new CategoryModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uniqueName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // icon
            cursor.getInt(offset + 4), // order
            cursor.getInt(offset + 5), // type
            cursor.getLong(offset + 6), // accountId
            cursor.getInt(offset + 7) // syncStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CategoryModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUniqueName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrder(cursor.getInt(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
        entity.setAccountId(cursor.getLong(offset + 6));
        entity.setSyncStatus(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CategoryModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CategoryModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CategoryModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
