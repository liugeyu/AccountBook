package com.geyu.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.geyu.database.ben.NoteType;
import com.geyu.database.ben.NoteTypeConverter;

import com.geyu.database.ben.Test;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEST".
*/
public class TestDao extends AbstractDao<Test, Long> {

    public static final String TABLENAME = "TEST";

    /**
     * Properties of entity Test.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, String.class, "time", false, "TIME");
        public final static Property Msg2 = new Property(2, String.class, "msg2", false, "MSG2");
        public final static Property Msg = new Property(3, String.class, "msg", false, "MSG");
        public final static Property Date = new Property(4, java.util.Date.class, "date", false, "DATE");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Type2 = new Property(6, String.class, "type2", false, "TYPE2");
        public final static Property TestInt = new Property(7, int.class, "testInt", false, "TEST_INT");
    }

    private final NoteTypeConverter typeConverter = new NoteTypeConverter();
    private final NoteTypeConverter type2Converter = new NoteTypeConverter();

    public TestDao(DaoConfig config) {
        super(config);
    }
    
    public TestDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TIME\" TEXT," + // 1: time
                "\"MSG2\" TEXT," + // 2: msg2
                "\"MSG\" TEXT," + // 3: msg
                "\"DATE\" INTEGER," + // 4: date
                "\"TYPE\" TEXT," + // 5: type
                "\"TYPE2\" TEXT," + // 6: type2
                "\"TEST_INT\" INTEGER NOT NULL );"); // 7: testInt
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Test entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
 
        String msg2 = entity.getMsg2();
        if (msg2 != null) {
            stmt.bindString(3, msg2);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(4, msg);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
 
        NoteType type = entity.getType();
        if (type != null) {
            stmt.bindString(6, typeConverter.convertToDatabaseValue(type));
        }
 
        NoteType type2 = entity.getType2();
        if (type2 != null) {
            stmt.bindString(7, type2Converter.convertToDatabaseValue(type2));
        }
        stmt.bindLong(8, entity.getTestInt());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Test entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
 
        String msg2 = entity.getMsg2();
        if (msg2 != null) {
            stmt.bindString(3, msg2);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(4, msg);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
 
        NoteType type = entity.getType();
        if (type != null) {
            stmt.bindString(6, typeConverter.convertToDatabaseValue(type));
        }
 
        NoteType type2 = entity.getType2();
        if (type2 != null) {
            stmt.bindString(7, type2Converter.convertToDatabaseValue(type2));
        }
        stmt.bindLong(8, entity.getTestInt());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Test readEntity(Cursor cursor, int offset) {
        Test entity = new Test( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // msg2
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // msg
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // date
            cursor.isNull(offset + 5) ? null : typeConverter.convertToEntityProperty(cursor.getString(offset + 5)), // type
            cursor.isNull(offset + 6) ? null : type2Converter.convertToEntityProperty(cursor.getString(offset + 6)), // type2
            cursor.getInt(offset + 7) // testInt
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Test entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMsg2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMsg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setType(cursor.isNull(offset + 5) ? null : typeConverter.convertToEntityProperty(cursor.getString(offset + 5)));
        entity.setType2(cursor.isNull(offset + 6) ? null : type2Converter.convertToEntityProperty(cursor.getString(offset + 6)));
        entity.setTestInt(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Test entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Test entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Test entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
